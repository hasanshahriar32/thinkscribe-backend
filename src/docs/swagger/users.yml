openapi: 3.1.0
info:
  title: Thinkscribe Users API
  version: 1.0.0
  description: User management endpoints
tags:
  - name: Users
    description: User management operations

paths:
  /users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/4XX'
    post:
      summary: Create or login a user with Clerk
      tags: [Users]
      description: |
        Creates a new user in the local database using Clerk user details. If the user already exists, returns a 409 response. Requires authentication with a valid Clerk JWT. The Clerk user ID is extracted from the JWT, not from the request body.
      security:
        - bearerAuth: []
      requestBody:
        required: false
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Clerk user ID not found in request (JWT missing or invalid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Clerk API or server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/4XX'
    put:
      summary: Update a user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/4XX'
    delete:
      summary: Delete a user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/4XX'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        emails:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
                format: email
              type:
                type: string
                enum: [primary, additional]
              primary:
                type: boolean
                description: true if this is the primary email
        isActive:
          type: boolean
        isDeleted:
          type: boolean
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        clerkUID:
          type: string
      required:
        - id
        - firstName
        - lastName
        - emails
        - clerkUID
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        This JWT is issued and validated by Clerk. To authenticate, use the access token provided by Clerk in the Authorization header:
        Authorization: Bearer <clerk_jwt_token>
        The token must be a valid Clerk session or access token. See https://clerk.com/docs/authentication/tokens for details.
  responses:
    '4XX':
      description: Error response (client error)
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 401
              message:
                type: string
                example: Unauthorized Access!
              data:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: string
                      example: /api/v1/users
                    message:
                      type: string
                      example: Unauthorized Access!
              meta:
                type: object
                nullable: true
                example: null

security:
  - bearerAuth: []

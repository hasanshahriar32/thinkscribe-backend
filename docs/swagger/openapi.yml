openapi: 3.1.0
info:
  title: Thinkscribe Backend API
  version: 1.0.0
  description: |
    This is the OpenAPI 3.0 specification for the Thinkscribe backend, fully migrated to Postgres/Drizzle ORM with robust, normalized RBAC (role-based access control). All endpoints enforce RBAC and use the new Postgres schema. Legacy MySQL/Knex code has been removed.
  contact:
    name: Thinkscribe Dev Team
    email: support@thinkscribe.com
servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone1:
          type: string
        phone2:
          type: string
        phone3:
          type: string
        address1:
          type: string
        address2:
          type: string
        img:
          type: string
        created_by:
          type: integer
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    Module:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    SubModule:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        moduleId:
          type: integer
        description:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    Permission:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        actionId:
          type: integer
        moduleId:
          type: integer
        subModuleId:
          type: integer
        description:
          type: string
        createdAt:
          type: string
          format: date-time
    Action:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
    Channel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        categoryId:
          type: integer
        description:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    ProductCategory:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

security:
  - bearerAuth: []

paths:
  /api/users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/roles:
    get:
      summary: Get all roles
      tags: [Roles]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      summary: Create a new role
      tags: [Roles]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/roles/{id}:
    get:
      summary: Get a role by ID
      tags: [Roles]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Role found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      summary: Update a role
      tags: [Roles]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      summary: Delete a role
      tags: [Roles]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Role deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/modules:
    get:
      summary: Get all modules
      tags: [Modules]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of modules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Module'
    post:
      summary: Create a new module
      tags: [Modules]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '200':
          description: Module created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
  /api/modules/{id}:
    get:
      summary: Get a module by ID
      tags: [Modules]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Module found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
    put:
      summary: Update a module
      tags: [Modules]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '200':
          description: Module updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
    delete:
      summary: Delete a module
      tags: [Modules]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Module deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
  /api/sub-modules:
    get:
      summary: Get all sub-modules
      tags: [SubModules]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of sub-modules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubModule'
    post:
      summary: Create a new sub-module
      tags: [SubModules]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubModule'
      responses:
        '200':
          description: Sub-module created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubModule'
  /api/sub-modules/{id}:
    get:
      summary: Get a sub-module by ID
      tags: [SubModules]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Sub-module found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubModule'
    put:
      summary: Update a sub-module
      tags: [SubModules]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubModule'
      responses:
        '200':
          description: Sub-module updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubModule'
    delete:
      summary: Delete a sub-module
      tags: [SubModules]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Sub-module deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubModule'
  /api/permissions:
    get:
      summary: Get all permissions
      tags: [Permissions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
    post:
      summary: Create a new permission
      tags: [Permissions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '200':
          description: Permission created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
  /api/permissions/{id}:
    get:
      summary: Get a permission by ID
      tags: [Permissions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Permission found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    put:
      summary: Update a permission
      tags: [Permissions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '200':
          description: Permission updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    delete:
      summary: Delete a permission
      tags: [Permissions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Permission deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
  /api/actions:
    get:
      summary: Get all actions
      tags: [Actions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
    post:
      summary: Create a new action
      tags: [Actions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        '200':
          description: Action created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
  /api/actions/{id}:
    get:
      summary: Get an action by ID
      tags: [Actions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Action found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
    put:
      summary: Update an action
      tags: [Actions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        '200':
          description: Action updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
    delete:
      summary: Delete an action
      tags: [Actions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Action deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
  /api/channels:
    get:
      summary: Get all channels
      tags: [Channels]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
    post:
      summary: Create a new channel
      tags: [Channels]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        '200':
          description: Channel created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
  /api/channels/{id}:
    get:
      summary: Get a channel by ID
      tags: [Channels]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Channel found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
    put:
      summary: Update a channel
      tags: [Channels]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        '200':
          description: Channel updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
    delete:
      summary: Delete a channel
      tags: [Channels]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Channel deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
  /api/products:
    get:
      summary: Get all products
      tags: [Products]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      tags: [Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /api/products/{id}:
    get:
      summary: Get a product by ID
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update a product
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /api/product-categories:
    get:
      summary: Get all product categories
      tags: [ProductCategories]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of product categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCategory'
    post:
      summary: Create a new product category
      tags: [ProductCategories]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
      responses:
        '200':
          description: Product category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
  /api/product-categories/{id}:
    get:
      summary: Get a product category by ID
      tags: [ProductCategories]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Product category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
    put:
      summary: Update a product category
      tags: [ProductCategories]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
      responses:
        '200':
          description: Product category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
    delete:
      summary: Delete a product category
      tags: [ProductCategories]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Product category deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
